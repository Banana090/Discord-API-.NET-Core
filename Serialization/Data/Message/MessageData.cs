using System;
using System.Collections.Generic;
using System.Text;

namespace DiscordAPI.Serialization.Data
{
    internal class MessageData
    {
        /// <summary>
        /// id of the message
        /// </summary>
        public string id { get; set; }
        /// <summary>
        /// id of the channel the message was sent in
        /// </summary>
        public string channel_id { get; set; }
        /// <summary>
        /// id of the guild the message was sent in
        /// </summary>
        public string guild_id { get; set; }
        /// <summary>
        /// the author of this message (not guaranteed to be a valid user, see below)
        /// </summary>
        public UserData author { get; set; }
        /// <summary>
        /// member properties for this message's author
        /// </summary>
        public GuildMemberData member { get; set; }
        /// <summary>
        /// contents of the message
        /// </summary>
        public string content { get; set; }
        /// <summary>
        /// when this message was sent
        /// </summary>
        public DateTime? timestamp { get; set; }
        /// <summary>
        /// when this message was edited (or null if never)
        /// </summary>
        public DateTime? edited_timestamp { get; set; }
        /// <summary>
        /// whether this was a TTS message
        /// </summary>
        public bool tts { get; set; }
        /// <summary>
        /// whether this message mentions everyone
        /// </summary>
        public bool mention_everyone { get; set; }
        /// <summary>
        /// users specifically mentioned in the message
        /// </summary>
        public UserData[] mentions { get; set; }
        /// <summary>
        /// roles specifically mentioned in this message
        /// </summary>
        public string[] mention_roles { get; set; }
        /// <summary>
        /// channels specifically mentioned in this message
        /// </summary>
        public ChannelMentionData[] mention_channels { get; set; }
        /// <summary>
        /// any attached files
        /// </summary>
        public AttachmentData[] attachments { get; set; }
        /// <summary>
        /// any embedded content
        /// </summary>
        public EmbedData[] embeds { get; set; }
        /// <summary>
        /// reactions to the message
        /// </summary>
        public ReactionData[] reactions { get; set; }
        
        //public string/int nonce { get; set; } >>> used for validating a message was sent
        
        /// <summary>
        /// whether this message is pinned
        /// </summary>
        public bool pinned { get; set; }
        /// <summary>
        /// if the message is generated by a webhook, this is the webhook's id
        /// </summary>
        public string webhook_id { get; set; }
        /// <summary>
        /// type of message
        /// </summary>
        public MessageType type { get; set; }
        /// <summary>
        /// sent with Rich Presence-related chat embeds
        /// </summary>
        public MessageActivityData activity { get; set; }
        /// <summary>
        /// sent with Rich Presence-related chat embeds
        /// </summary>
        public MessageApplicationData application { get; set; }
        /// <summary>
        /// reference data sent with crossposted messages
        /// </summary>
        public MessageReferenceData message_reference { get; set; }
        /// <summary>
        /// message flags OR d together, describes extra features of the message
        /// </summary>
        public int flags { get; set; }
    }
}
